# Queries must match the schema.graphql file, see readme.md test section.

# INSERT INBOUND SHIPMENT

mutation insertInboundShipmentFull(
  $id: String!
  $storeId: String!
  $otherPartyId: String!
  $on_hold_option: Boolean
  $comment_option: String
  $theirReference_option: String
  $colour_option: String
) {
  insertInboundShipment(
    storeId: $storeId
    input: {
      id: $id
      otherPartyId: $otherPartyId
      onHold: $on_hold_option
      theirReference: $theirReference_option
      comment: $comment_option
      colour: $colour_option
    }
  ) {
    ...InsertInboundShipmentResponse
  }
}

fragment InsertInboundShipmentResponse on InsertInboundShipmentResponse {
  __typename
  ...InsertInboundShipmentError
  ...NodeError
  ...InvoiceNode
}

fragment InsertInboundShipmentError on InsertInboundShipmentError {
  error {
    ...InsertInboundShipmentErrorInterface
  }
}

fragment InsertInboundShipmentErrorInterface on InsertInboundShipmentErrorInterface {
  __typename
  ...DatabaseError
  ...ForeignKeyError
  ...OtherPartyNotASupplier
  ...RecordAlreadyExist
}

# UPDATE INBOUND SHIPMENT

mutation updateInboundShipmentFull(
  $id: String!
  $otherPartyId_option: String
  $update_inbound_status_option: UpdateInboundShipmentStatusInput
  $on_hold_option: Boolean
  $comment_option: String
  $theirReference_option: String
  $colour_option: String
) {
  updateInboundShipment(
    input: {
      id: $id
      otherPartyId: $otherPartyId_option
      status: $update_inbound_status_option
      onHold: $on_hold_option
      theirReference: $theirReference_option
      comment: $comment_option
      colour: $colour_option
    }
  ) {
    ...UpdateInboundShipmentResponse
  }
}

fragment UpdateInboundShipmentResponse on UpdateInboundShipmentResponse {
  __typename
  ...UpdateInboundShipmentError
  ...NodeError
  ...InvoiceNode
}

fragment UpdateInboundShipmentError on UpdateInboundShipmentError {
  error {
    ...UpdateInboundShipmentErrorInterface
  }
}

fragment UpdateInboundShipmentErrorInterface on UpdateInboundShipmentErrorInterface {
  __typename
  ...DatabaseError
  ...ForeignKeyError
  ...OtherPartyNotASupplier
  ...RecordNotFound
  ...CannotEditInvoice
  ...NotAnInboundShipment
  ...InvoiceDoesNotBelongToCurrentStore
  ...CannotReverseInvoiceStatus
  ...CannotChangeStatusOfInvoiceOnHold
}

# DELETE INBOUND SHIPMENT

mutation deleteInboundShipmentFull($id: String!) {
  deleteInboundShipment(input: { id: $id }) {
    ...DeleteInboundShipmentResponse
  }
}

fragment DeleteInboundShipmentResponse on DeleteInboundShipmentResponse {
  __typename
  ...DeleteInboundShipmentError
  ...DeleteResponse
}

fragment DeleteInboundShipmentError on DeleteInboundShipmentError {
  error {
    ...DeleteInboundShipmentErrorInterface
  }
}

fragment DeleteInboundShipmentErrorInterface on DeleteInboundShipmentErrorInterface {
  __typename
  ...DatabaseError
  ...RecordNotFound
  ...CannotEditInvoice
  ...NotAnInboundShipment
  ...InvoiceDoesNotBelongToCurrentStore
  ...CannotDeleteInvoiceWithLines
}

# INSERT INBOUND SHIPMENT LINE

mutation insertInboundShipmentLineFull(
  $batch_option: String
  $locationIdOption: String
  $costPricePerPack: Float!
  $expiryDate_option: NaiveDate
  $id: String!
  $invoiceId: String!
  $itemId: String!
  $numberOfPacks: Int!
  $sellPricePerPack: Float!
  $packSize: Int!
  $total_before_tax: Float!
  $total_after_tax: Float!
) {
  insertInboundShipmentLine(
    input: {
      id: $id
      invoiceId: $invoiceId
      itemId: $itemId
      locationId: $locationIdOption
      packSize: $packSize
      costPricePerPack: $costPricePerPack
      sellPricePerPack: $sellPricePerPack
      numberOfPacks: $numberOfPacks
      expiryDate: $expiryDate_option
      batch: $batch_option
      packSize: $packSize
      totalBeforeTax: $total_before_tax
      totalAfterTax: $total_after_tax
    }
  ) {
    ...InsertInboundShipmentLineResponse
  }
}

fragment InsertInboundShipmentLineResponse on InsertInboundShipmentLineResponse {
  __typename
  ...InsertInboundShipmentLineError
  ...NodeError
  ...InvoiceLineNode
}

fragment InsertInboundShipmentLineError on InsertInboundShipmentLineError {
  error {
    ...InsertInboundShipmentLineErrorInterface
  }
}

fragment InsertInboundShipmentLineErrorInterface on InsertInboundShipmentLineErrorInterface {
  __typename
  ...CannotEditInvoice
  ...DatabaseError
  ...ForeignKeyError
  ...InvoiceDoesNotBelongToCurrentStore
  ...NotAnInboundShipment
  ...RangeError
  ...RecordAlreadyExist
}

# UPDATES INBOUND SHIPMENT LINE

mutation updateInboundShipmentLineFull(
  $batch_option: String
  $locationIdOption: String
  $costPricePerPack_option: Float
  $expiryDate_option: NaiveDate
  $id: String!
  $invoiceId: String!
  $itemId_option: String
  $numberOfPacks_option: Int
  $sellPricePerPack_option: Float
  $packSize_option: Int
) {
  updateInboundShipmentLine(
    input: {
      id: $id
      invoiceId: $invoiceId
      locationId: $locationIdOption
      itemId: $itemId_option
      packSize: $packSize_option
      costPricePerPack: $costPricePerPack_option
      sellPricePerPack: $sellPricePerPack_option
      numberOfPacks: $numberOfPacks_option
      expiryDate: $expiryDate_option
      batch: $batch_option
      packSize: $packSize_option
    }
  ) {
    ...UpdateInboundShipmentLineResponse
  }
}

fragment UpdateInboundShipmentLineResponse on UpdateInboundShipmentLineResponse {
  __typename
  ...UpdateInboundShipmentLineError
  ...NodeError
  ...InvoiceLineNode
}

fragment UpdateInboundShipmentLineError on UpdateInboundShipmentLineError {
  error {
    ...UpdateInboundShipmentLineErrorInterface
  }
}

fragment UpdateInboundShipmentLineErrorInterface on UpdateInboundShipmentLineErrorInterface {
  __typename
  ...CannotEditInvoice
  ...DatabaseError
  ...ForeignKeyError
  ...InvoiceDoesNotBelongToCurrentStore
  ...NotAnInboundShipment
  ...RangeError
  ...RecordNotFound
  ...BatchIsReserved
  ...InvoiceLineBelongsToAnotherInvoice
}

# UPDATES OUTBOUND SHIPMENT LINE

mutation updateOutboundShipmentLineFull(
  $id: String!
  $invoiceId: String!
  $itemId_option: String
  $numberOfPacks_option: Int
  $stockLineId_option: String
) {
  updateOutboundShipmentLine(
    input: {
      id: $id
      invoiceId: $invoiceId
      itemId: $itemId_option
      numberOfPacks: $numberOfPacks_option
      stockLineId: $stockLineId_option
    }
  ) {
    ...UpdateOutboundShipmentLineResponse
  }
}

fragment UpdateOutboundShipmentLineResponse on UpdateOutboundShipmentLineResponse {
  __typename
  ...UpdateOutboundShipmentLineError
  ...NodeError
  ...InvoiceLineNode
}

fragment UpdateOutboundShipmentLineError on UpdateOutboundShipmentLineError {
  error {
    ...UpdateOutboundShipmentLineErrorInterface
  }
}

fragment UpdateOutboundShipmentLineErrorInterface on UpdateOutboundShipmentLineErrorInterface {
  __typename
  ...CannotEditInvoice
  ...DatabaseError
  ...ForeignKeyError
  ...InvoiceDoesNotBelongToCurrentStore
  ...InvoiceLineBelongsToAnotherInvoice
  ...LineDoesNotReferenceStockLine
  ...NotAnOutboundShipment
  ...NotEnoughStockForReduction
  ...RangeError
  ...RecordNotFound
  ...StockLineIsOnHold
  ...LocationIsOnHold
  ...StockLineAlreadyExistsInInvoice
  ...StockLineDoesNotBelongToCurrentStore
  ...ItemDoesNotMatchStockLine
}

# INSERTS OUTBOUND SHIPMENT LINE

mutation insertOutboundShipmentLineFull(
  $id: String!
  $invoiceId: String!
  $itemId: String!
  $numberOfPacks: Int!
  $stockLineId: String!
  $total_before_tax: Float!
  $total_after_tax: Float!
) {
  insertOutboundShipmentLine(
    input: {
      id: $id
      invoiceId: $invoiceId
      itemId: $itemId
      numberOfPacks: $numberOfPacks
      stockLineId: $stockLineId
      totalBeforeTax: $total_before_tax
      totalAfterTax: $total_after_tax
    }
  ) {
    ...InsertOutboundShipmentLineResponse
  }
}

fragment InsertOutboundShipmentLineResponse on InsertOutboundShipmentLineResponse {
  __typename
  ...InsertOutboundShipmentLineError
  ...NodeError
  ...InvoiceLineNode
}

fragment InsertOutboundShipmentLineError on InsertOutboundShipmentLineError {
  error {
    ...InsertOutboundShipmentLineErrorInterface
  }
}

fragment InsertOutboundShipmentLineErrorInterface on InsertOutboundShipmentLineErrorInterface {
  __typename
  ...CannotEditInvoice
  ...DatabaseError
  ...ForeignKeyError
  ...InvoiceDoesNotBelongToCurrentStore
  ...ItemDoesNotMatchStockLine
  ...NotAnOutboundShipment
  ...NotEnoughStockForReduction
  ...RangeError
  ...RecordAlreadyExist
  ...StockLineIsOnHold
  ...LocationIsOnHold
  ...StockLineAlreadyExistsInInvoice
  ...StockLineDoesNotBelongToCurrentStore
}

# DELETE INBOUND SHIPMENT LINE

mutation deleteInboundShipmentLineFull($id: String!, $invoiceId: String!) {
  deleteInboundShipmentLine(input: { id: $id, invoiceId: $invoiceId }) {
    ...DeleteInboundShipmentLineResponse
  }
}

fragment DeleteInboundShipmentLineResponse on DeleteInboundShipmentLineResponse {
  __typename
  ...DeleteInboundShipmentLineError
  ...DeleteResponse
}

fragment DeleteInboundShipmentLineError on DeleteInboundShipmentLineError {
  error {
    ...DeleteInboundShipmentLineErrorInterface
  }
}

fragment DeleteInboundShipmentLineErrorInterface on DeleteInboundShipmentLineErrorInterface {
  __typename
  ...CannotEditInvoice
  ...DatabaseError
  ...ForeignKeyError
  ...InvoiceDoesNotBelongToCurrentStore
  ...NotAnInboundShipment
  ...RecordNotFound
  ...BatchIsReserved
  ...InvoiceLineBelongsToAnotherInvoice
}

# DELETE OUTBOUND SHIPMENT LINE

mutation deleteOutboundShipmentLineFull($id: String!, $invoiceId: String!) {
  deleteOutboundShipmentLine(input: { id: $id, invoiceId: $invoiceId }) {
    ...DeleteOutboundShipmentLineResponse
  }
}

fragment DeleteOutboundShipmentLineResponse on DeleteOutboundShipmentLineResponse {
  __typename
  ...DeleteOutboundShipmentLineError
  ...DeleteResponse
}

fragment DeleteOutboundShipmentLineError on DeleteOutboundShipmentLineError {
  error {
    ...DeleteOutboundShipmentLineErrorInterface
  }
}

fragment DeleteOutboundShipmentLineErrorInterface on DeleteOutboundShipmentLineErrorInterface {
  __typename
  ...CannotEditInvoice
  ...DatabaseError
  ...ForeignKeyError
  ...InvoiceDoesNotBelongToCurrentStore
  ...NotAnOutboundShipment
  ...RecordNotFound
  ...InvoiceLineBelongsToAnotherInvoice
}

# INVOICE

query invoiceFull($id: String!) {
  invoice(id: $id, storeId: "store_a") {
    ...InvoiceResponse
  }
}

fragment InvoiceResponse on InvoiceResponse {
  __typename
  ...InvoiceNode
  ...NodeError
}

fragment InvoiceNode on InvoiceNode {
  comment
  createdDatetime
  allocatedDatetime
  pickedDatetime
  shippedDatetime
  deliveredDatetime
  verifiedDatetime
  id
  invoiceNumber
  lines {
    ...InvoiceLineConnector
  }
  otherPartyId
  otherPartyName
  pricing {
    ...InvoicePriceResponse
  }
  status
  theirReference
  type
}

fragment InvoicePriceResponse on InvoicePriceResponse {
  __typename
  ...NodeError
  ...InvoicePricingNode
}

fragment InvoicePricingNode on InvoicePricingNode {
  totalAfterTax
}

# INVOICE LINE

fragment InvoiceLineResponse on InvoiceLineResponse {
  __typename
  ...NodeError
  ...InvoiceLineNode
}

fragment InvoiceLineNode on InvoiceLineNode {
  batch
  costPricePerPack
  expiryDate
  id
  itemCode
  itemId
  locationId
  itemName
  numberOfPacks
  packSize
  sellPricePerPack
  note
  stockLine {
    ...StockLineResponse
  }
}

fragment InvoiceLineConnector on InvoiceLineConnector {
  totalCount
  nodes {
    ...InvoiceLineNode
  }
}

# STOCK LINE

fragment StockLineResponse on StockLineResponse {
  __typename
  ...NodeError
  ...StockLineNode
}

fragment StockLineNode on StockLineNode {
  id
  availableNumberOfPacks
  batch
  costPricePerPack
  expiryDate
  itemId
  locationId
  packSize
  sellPricePerPack
  storeId
  totalNumberOfPacks
  onHold
  note
}

# NAME

fragment NameNode on NameNode {
  code
  id
  isCustomer
  isSupplier
  name
}

# COMMON

fragment DeleteResponse on DeleteResponse {
  id
}

# ERRORS

fragment RecordAlreadyExist on RecordAlreadyExist {
  description
}

fragment RecordNotFound on RecordNotFound {
  description
}

fragment ForeignKeyError on ForeignKeyError {
  description
  key
}

fragment DatabaseError on DatabaseError {
  description
  fullError
}

fragment OtherPartyNotASupplier on OtherPartyNotASupplier {
  description
  otherParty {
    ...NameNode
  }
}

fragment NodeError on NodeError {
  error {
    ...NodeErrorInterface
  }
}

fragment NodeErrorInterface on NodeErrorInterface {
  __typename
  ...DatabaseError
  ...RecordNotFound
}

fragment RangeError on RangeError {
  description
  field
  max
  min
}

fragment CannotEditInvoice on CannotEditInvoice {
  description
}

fragment NotAnInboundShipment on NotAnInboundShipment {
  description
}

fragment NotAnOutboundShipment on NotAnOutboundShipment {
  description
}

fragment InvoiceDoesNotBelongToCurrentStore on InvoiceDoesNotBelongToCurrentStore {
  description
}

fragment CannotChangeStatusOfInvoiceOnHold on CannotChangeStatusOfInvoiceOnHold {
  description
}

fragment CannotReverseInvoiceStatus on CannotReverseInvoiceStatus {
  description
}

fragment CannotDeleteInvoiceWithLines on CannotDeleteInvoiceWithLines {
  description
  lines {
    ...InvoiceLineConnector
  }
}

fragment BatchIsReserved on BatchIsReserved {
  description
}

fragment StockLineDoesNotBelongToCurrentStore on StockLineDoesNotBelongToCurrentStore {
  description
}

fragment StockLineIsOnHold on StockLineIsOnHold {
  description
}

fragment LocationIsOnHold on LocationIsOnHold {
  description
}

fragment ItemDoesNotMatchStockLine on ItemDoesNotMatchStockLine {
  description
}

fragment LineDoesNotReferenceStockLine on LineDoesNotReferenceStockLine {
  description
}

fragment StockLineAlreadyExistsInInvoice on StockLineAlreadyExistsInInvoice {
  description
  line {
    ...InvoiceLineResponse
  }
}

fragment NotEnoughStockForReduction on NotEnoughStockForReduction {
  description
  batch {
    ...StockLineResponse
  }
  line {
    ...InvoiceLineResponse
  }
}

fragment InvoiceLineBelongsToAnotherInvoice on InvoiceLineBelongsToAnotherInvoice {
  description
  invoice {
    ...InvoiceResponse
  }
}
