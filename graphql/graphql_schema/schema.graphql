type AccessDenied implements LogoutErrorInterface {
	description: String!
	fullError: String!
}
type AddFromMasterListError {
	error: AddFromMasterListErrorInterface!
}
interface AddFromMasterListErrorInterface {
	description: String!
}
input AddFromMasterListInput {
	requestRequisitionId: String!
	masterListId: String!
}
union AddFromMasterListResponse = | AddFromMasterListError | RequisitionLineConnector
type AuthToken {
	"""
	Bearer token
	"""
	token: String!
}
"""
Generic Error Wrapper
"""
type AuthTokenError {
	error: AuthTokenErrorInterface!
}
interface AuthTokenErrorInterface {
	description: String!
}
union AuthTokenResponse = | AuthTokenError | AuthToken
type BatchInboundShipmentResponse {
	insertInboundShipments: [InsertInboundShipmentResponseWithId!]
	insertInboundShipmentLines: [InsertInboundShipmentLineResponseWithId!]
	updateInboundShipmentLines: [UpdateInboundShipmentLineResponseWithId!]
	deleteInboundShipmentLines: [DeleteInboundShipmentLineResponseWithId!]
	updateInboundShipments: [UpdateInboundShipmentResponseWithId!]
	deleteInboundShipments: [DeleteInboundShipmentResponseWithId!]
}
type BatchIsReserved implements UpdateInboundShipmentLineErrorInterface & DeleteInboundShipmentLineErrorInterface {
	description: String!
}
type BatchOutboundShipmentResponse {
	insertOutboundShipments: [InsertOutboundShipmentResponseWithId!]
	insertOutboundShipmentLines: [InsertOutboundShipmentLineResponseWithId!]
	updateOutboundShipmentLines: [UpdateOutboundShipmentLineResponseWithId!]
	deleteOutboundShipmentLines: [DeleteOutboundShipmentLineResponseWithId!]
	insertOutboundShipmentServiceLines: [InsertOutboundShipmentServiceLineResponseWithId!]
	updateOutboundShipmentServiceLines: [UpdateOutboundShipmentServiceLineResponseWithId!]
	deleteOutboundShipmentServiceLines: [DeleteOutboundShipmentServiceLineResponseWithId!]
	updateOutboundShipments: [UpdateOutboundShipmentResponseWithId!]
	deleteOutboundShipments: [DeleteOutboundShipmentResponseWithId!]
}
type CanOnlyChangeToAllocatedWhenNoUnallocatedLines implements UpdateOutboundShipmentErrorInterface {
	description: String!
	invoiceLines: InvoiceLineConnector!
}
type CanOnlyEditInvoicesInLoggedInStoreError implements UpdateOutboundShipmentErrorInterface {
	description: String!
}
type CannotChangeStatusOfInvoiceOnHold implements UpdateInboundShipmentErrorInterface & UpdateOutboundShipmentErrorInterface {
	description: String!
}
type CannotDeleteInvoiceWithLines implements DeleteInboundShipmentErrorInterface & DeleteOutboundShipmentErrorInterface {
	description: String!
	lines: InvoiceLineConnector!
}
type CannotDeleteRequisitionWithLines implements DeleteRequestRequisitionErrorInterface {
	description: String!
}
type CannotEditInvoice implements DeleteOutboundShipmentErrorInterface & UpdateOutboundShipmentLineErrorInterface & InsertOutboundShipmentLineErrorInterface & DeleteOutboundShipmentLineErrorInterface & InsertOutboundShipmentServiceLineErrorInterface & UpdateOutboundShipmentServiceLineErrorInterface & InsertInboundShipmentLineErrorInterface & UpdateInboundShipmentErrorInterface & DeleteOutboundShipmentServiceLineErrorInterface & DeleteInboundShipmentLineErrorInterface & DeleteInboundShipmentErrorInterface & UpdateInboundShipmentLineErrorInterface {
	description: String!
}
type CannotEditRequisition implements DeleteRequestRequisitionErrorInterface & DeleteRequestRequisitionLineErrorInterface & UpdateRequestRequisitionErrorInterface & UpdateResponseRequisitionLineErrorInterface & UpdateRequestRequisitionLineErrorInterface & UseSuggestedQuantityErrorInterface & InsertRequestRequisitionLineErrorInterface & UpdateResponseRequisitionErrorInterface & AddFromMasterListErrorInterface & SupplyRequestedQuantityErrorInterface & CreateRequisitionShipmentErrorInterface {
	description: String!
}
type CannotReverseInvoiceStatus implements UpdateInboundShipmentErrorInterface & UpdateOutboundShipmentErrorInterface {
	description: String!
}
"""
Generic Error Wrapper
"""
type ConnectorError {
	error: ConnectorErrorInterface!
}
interface ConnectorErrorInterface {
	description: String!
}
type CreateRequisitionShipmentError {
	error: CreateRequisitionShipmentErrorInterface!
}
interface CreateRequisitionShipmentErrorInterface {
	description: String!
}
input CreateRequisitionShipmentInput {
	responseRequisitionId: String!
}
union CreateRequisitionShipmentResponse = | CreateRequisitionShipmentError | InvoiceNode
type DatabaseError implements DeleteOutboundShipmentLineErrorInterface & DeleteLocationErrorInterface & RefreshTokenErrorInterface & UpdateLocationErrorInterface & UpdateOutboundShipmentErrorInterface & UserRegisterErrorInterface & AuthTokenErrorInterface & InsertLocationErrorInterface & InsertOutboundShipmentLineErrorInterface & UpdateOutboundShipmentLineErrorInterface & InsertOutboundShipmentErrorInterface & InsertInboundShipmentLineErrorInterface & UpdateInboundShipmentLineErrorInterface & InsertInboundShipmentErrorInterface & NodeErrorInterface & InsertOutboundShipmentServiceLineErrorInterface & ConnectorErrorInterface & DeleteOutboundShipmentServiceLineErrorInterface & DeleteInboundShipmentErrorInterface & UpdateInboundShipmentErrorInterface & DeleteInboundShipmentLineErrorInterface & DeleteOutboundShipmentErrorInterface & UpdateOutboundShipmentServiceLineErrorInterface {
	description: String!
	fullError: String!
}
"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime
input DatetimeFilterInput {
	equalTo: DateTime
	beforeOrEqualTo: DateTime
	afterOrEqualTo: DateTime
}
"""
Generic Error Wrapper
"""
type DeleteInboundShipmentError {
	error: DeleteInboundShipmentErrorInterface!
}
interface DeleteInboundShipmentErrorInterface {
	description: String!
}
input DeleteInboundShipmentInput {
	id: String!
}
"""
Generic Error Wrapper
"""
type DeleteInboundShipmentLineError {
	error: DeleteInboundShipmentLineErrorInterface!
}
interface DeleteInboundShipmentLineErrorInterface {
	description: String!
}
input DeleteInboundShipmentLineInput {
	id: String!
	invoiceId: String!
}
union DeleteInboundShipmentLineResponse = | DeleteInboundShipmentLineError | DeleteResponse
type DeleteInboundShipmentLineResponseWithId {
	id: String!
	response: DeleteInboundShipmentLineResponse!
}
union DeleteInboundShipmentResponse = | DeleteInboundShipmentError | DeleteResponse
type DeleteInboundShipmentResponseWithId {
	id: String!
	response: DeleteInboundShipmentResponse!
}
type DeleteLocationError {
	error: DeleteLocationErrorInterface!
}
interface DeleteLocationErrorInterface {
	description: String!
}
input DeleteLocationInput {
	id: String!
}
union DeleteLocationResponse = | DeleteLocationError | DeleteResponse
"""
Generic Error Wrapper
"""
type DeleteOutboundShipmentError {
	error: DeleteOutboundShipmentErrorInterface!
}
interface DeleteOutboundShipmentErrorInterface {
	description: String!
}
"""
Generic Error Wrapper
"""
type DeleteOutboundShipmentLineError {
	error: DeleteOutboundShipmentLineErrorInterface!
}
interface DeleteOutboundShipmentLineErrorInterface {
	description: String!
}
input DeleteOutboundShipmentLineInput {
	id: String!
	invoiceId: String!
}
union DeleteOutboundShipmentLineResponse = | DeleteOutboundShipmentLineError | DeleteResponse
type DeleteOutboundShipmentLineResponseWithId {
	id: String!
	response: DeleteOutboundShipmentLineResponse!
}
union DeleteOutboundShipmentResponse = | DeleteOutboundShipmentError | DeleteResponse
type DeleteOutboundShipmentResponseWithId {
	id: String!
	response: DeleteOutboundShipmentResponse!
}
"""
Generic Error Wrapper
"""
type DeleteOutboundShipmentServiceLineError {
	error: DeleteOutboundShipmentServiceLineErrorInterface!
}
interface DeleteOutboundShipmentServiceLineErrorInterface {
	description: String!
}
input DeleteOutboundShipmentServiceLineInput {
	id: String!
	invoiceId: String!
}
union DeleteOutboundShipmentServiceLineResponse = | DeleteOutboundShipmentServiceLineError | DeleteResponse
type DeleteOutboundShipmentServiceLineResponseWithId {
	id: String!
	response: DeleteOutboundShipmentServiceLineResponse!
}
type DeleteOutboundShipmentUnallocatedLineError {
	error: DeleteOutboundShipmentUnallocatedLineErrorInterface!
}
interface DeleteOutboundShipmentUnallocatedLineErrorInterface {
	description: String!
}
input DeleteOutboundShipmentUnallocatedLineInput {
	id: String!
}
union DeleteOutboundShipmentUnallocatedLineResponse = | DeleteOutboundShipmentUnallocatedLineError | DeleteResponse
type DeleteRequestRequisitionError {
	error: DeleteRequestRequisitionErrorInterface!
}
interface DeleteRequestRequisitionErrorInterface {
	description: String!
}
input DeleteRequestRequisitionInput {
	id: String!
}
type DeleteRequestRequisitionLineError {
	error: DeleteRequestRequisitionLineErrorInterface!
}
interface DeleteRequestRequisitionLineErrorInterface {
	description: String!
}
input DeleteRequestRequisitionLineInput {
	id: String!
}
union DeleteRequestRequisitionLineResponse = | DeleteRequestRequisitionLineError | DeleteResponse
union DeleteRequestRequisitionResponse = | DeleteRequestRequisitionError | DeleteResponse
type DeleteResponse {
	id: String!
}
input DeleteStockTakeInput {
	id: String!
}
input DeleteStockTakeLineInput {
	id: String!
}
type DeleteStockTakeLineNode {
	id: String!
}
union DeleteStockTakeLineResponse = | DeleteStockTakeLineNode
type DeleteStockTakeNode {
	"""
	The id of the deleted stock take
	"""
	id: String!
}
union DeleteStockTakeResponse = | DeleteStockTakeNode
input EqualFilterBigNumberInput {
	equalTo: Int
	equalAny: [Int!]
	notEqualTo: Int
}
input EqualFilterBooleanInput {
	equalTo: Boolean
	equalAny: [Boolean!]
	notEqualTo: Boolean
}
input EqualFilterInvoiceStatusInput {
	equalTo: InvoiceNodeStatus
	equalAny: [InvoiceNodeStatus!]
	notEqualTo: InvoiceNodeStatus
}
input EqualFilterInvoiceTypeInput {
	equalTo: InvoiceNodeType
	equalAny: [InvoiceNodeType!]
	notEqualTo: InvoiceNodeType
}
input EqualFilterRequisitionStatusInput {
	equalTo: RequisitionNodeStatus
	equalAny: [RequisitionNodeStatus!]
	notEqualTo: RequisitionNodeStatus
}
input EqualFilterRequisitionTypeInput {
	equalTo: RequisitionNodeType
	equalAny: [RequisitionNodeType!]
	notEqualTo: RequisitionNodeType
}
input EqualFilterStockTakeStatusInput {
	equalTo: StockTakeNodeStatus
	equalAny: [StockTakeNodeStatus!]
	notEqualTo: StockTakeNodeStatus
}
input EqualFilterStringInput {
	equalTo: String
	equalAny: [String!]
	notEqualTo: String
}
enum ForeignKey {
	otherPartyId
	itemId
	invoiceId
	stockLineId
	locationId
	requisitionId
}
type ForeignKeyError implements UpdateOutboundShipmentErrorInterface & DeleteOutboundShipmentLineErrorInterface & InsertOutboundShipmentErrorInterface & UpdateResponseRequisitionLineErrorInterface & InsertRequestRequisitionLineErrorInterface & UpdateRequestRequisitionLineErrorInterface & UpdateOutboundShipmentServiceLineErrorInterface & DeleteInboundShipmentLineErrorInterface & InsertInboundShipmentErrorInterface & UpdateOutboundShipmentLineErrorInterface & InsertOutboundShipmentServiceLineErrorInterface & UpdateInboundShipmentErrorInterface & InsertOutboundShipmentUnallocatedLineErrorInterface & UpdateInboundShipmentLineErrorInterface & DeleteOutboundShipmentServiceLineErrorInterface & InsertInboundShipmentLineErrorInterface & InsertOutboundShipmentLineErrorInterface {
	description: String!
	key: ForeignKey!
}
type InboundInvoiceCounts {
	created: InvoiceCountsSummary!
}
"""
Generic Error Wrapper
"""
type InsertInboundShipmentError {
	error: InsertInboundShipmentErrorInterface!
}
interface InsertInboundShipmentErrorInterface {
	description: String!
}
input InsertInboundShipmentInput {
	id: String!
	otherPartyId: String!
	onHold: Boolean
	comment: String
	theirReference: String
	colour: String
}
"""
Generic Error Wrapper
"""
type InsertInboundShipmentLineError {
	error: InsertInboundShipmentLineErrorInterface!
}
interface InsertInboundShipmentLineErrorInterface {
	description: String!
}
input InsertInboundShipmentLineInput {
	id: String!
	invoiceId: String!
	itemId: String!
	packSize: Int!
	batch: String
	locationId: String
	costPricePerPack: Float!
	sellPricePerPack: Float!
	expiryDate: NaiveDate
	numberOfPacks: Int!
	totalBeforeTax: Float!
	totalAfterTax: Float!
	tax: Float
}
union InsertInboundShipmentLineResponse = | InsertInboundShipmentLineError | NodeError | InvoiceLineNode
type InsertInboundShipmentLineResponseWithId {
	id: String!
	response: InsertInboundShipmentLineResponse!
}
union InsertInboundShipmentResponse = | InsertInboundShipmentError | NodeError | InvoiceNode
type InsertInboundShipmentResponseWithId {
	id: String!
	response: InsertInboundShipmentResponse!
}
type InsertLocationError {
	error: InsertLocationErrorInterface!
}
interface InsertLocationErrorInterface {
	description: String!
}
input InsertLocationInput {
	id: String!
	code: String!
	name: String
	onHold: Boolean
}
union InsertLocationResponse = | InsertLocationError | LocationNode
"""
Generic Error Wrapper
"""
type InsertOutboundShipmentError {
	error: InsertOutboundShipmentErrorInterface!
}
interface InsertOutboundShipmentErrorInterface {
	description: String!
}
input InsertOutboundShipmentInput {
	"""
	The new invoice id provided by the client
	"""
	id: String!
	"""
	The other party must be an customer of the current store
	"""
	otherPartyId: String!
	status: InvoiceNodeStatus
	onHold: Boolean
	comment: String
	theirReference: String
	colour: String
}
"""
Generic Error Wrapper
"""
type InsertOutboundShipmentLineError {
	error: InsertOutboundShipmentLineErrorInterface!
}
interface InsertOutboundShipmentLineErrorInterface {
	description: String!
}
input InsertOutboundShipmentLineInput {
	id: String!
	invoiceId: String!
	itemId: String!
	stockLineId: String!
	numberOfPacks: Int!
	totalBeforeTax: Float!
	totalAfterTax: Float!
	tax: Float
}
union InsertOutboundShipmentLineResponse = | InsertOutboundShipmentLineError | NodeError | InvoiceLineNode
type InsertOutboundShipmentLineResponseWithId {
	id: String!
	response: InsertOutboundShipmentLineResponse!
}
union InsertOutboundShipmentResponse = | InsertOutboundShipmentError | NodeError | InvoiceNode
type InsertOutboundShipmentResponseWithId {
	id: String!
	response: InsertOutboundShipmentResponse!
}
"""
Generic Error Wrapper
"""
type InsertOutboundShipmentServiceLineError {
	error: InsertOutboundShipmentServiceLineErrorInterface!
}
interface InsertOutboundShipmentServiceLineErrorInterface {
	description: String!
}
input InsertOutboundShipmentServiceLineInput {
	id: String!
	invoiceId: String!
	itemId: String!
	name: String
	totalBeforeTax: Float!
	totalAfterTax: Float!
	tax: Float
	note: String
}
union InsertOutboundShipmentServiceLineResponse = | InsertOutboundShipmentServiceLineError | InvoiceLineNode
type InsertOutboundShipmentServiceLineResponseWithId {
	id: String!
	response: InsertOutboundShipmentServiceLineResponse!
}
type InsertOutboundShipmentUnallocatedLineError {
	error: InsertOutboundShipmentUnallocatedLineErrorInterface!
}
interface InsertOutboundShipmentUnallocatedLineErrorInterface {
	description: String!
}
input InsertOutboundShipmentUnallocatedLineInput {
	id: String!
	invoiceId: String!
	itemId: String!
	quantity: Int!
}
union InsertOutboundShipmentUnallocatedLineResponse = | InsertOutboundShipmentUnallocatedLineError | InvoiceLineNode
type InsertRequestRequisitionError {
	error: InsertRequestRequisitionErrorInterface!
}
interface InsertRequestRequisitionErrorInterface {
	description: String!
}
input InsertRequestRequisitionInput {
	id: String!
	otherPartyId: String!
	colour: String
	theirReference: String
	comment: String
	maxMonthsOfStock: Float!
	minMonthsOfStock: Float!
}
type InsertRequestRequisitionLineError {
	error: InsertRequestRequisitionLineErrorInterface!
}
interface InsertRequestRequisitionLineErrorInterface {
	description: String!
}
input InsertRequestRequisitionLineInput {
	id: String!
	itemId: String!
	requisitionId: String!
	requestedQuantity: Int
}
union InsertRequestRequisitionLineResponse = | InsertRequestRequisitionLineError | RequisitionLineNode
union InsertRequestRequisitionResponse = | InsertRequestRequisitionError | RequisitionNode
input InsertStockTakeInput {
	id: String!
	comment: String
	description: String
	createdDatetime: NaiveDateTime!
}
input InsertStockTakeLineInput {
	id: String!
	stockTakeId: String!
	stockLineId: String
	locationId: String
	comment: String
	countedNumberOfPacks: Int
	itemId: String
	batch: String
	expiryDate: NaiveDate
	packSize: Int
	costPricePerPack: Float
	sellPricePerPack: Float
	note: String
}
union InsertStockTakeLineResponse = | StockTakeLineNode
union InsertStockTakeResponse = | StockTakeNode
type InternalError implements AuthTokenErrorInterface & UserRegisterErrorInterface & UpdateLocationErrorInterface & LogoutErrorInterface & InsertLocationErrorInterface & RefreshTokenErrorInterface & InsertOutboundShipmentServiceLineErrorInterface & UpdateOutboundShipmentServiceLineErrorInterface {
	description: String!
	fullError: String!
}
type InvalidCredentials implements AuthTokenErrorInterface {
	description: String!
}
type InvalidToken implements RefreshTokenErrorInterface {
	description: String!
}
"""
Generic Connector
"""
type InvoiceConnector {
	totalCount: Int!
	nodes: [InvoiceNode!]!
}
type InvoiceCounts {
	outbound: OutboundInvoiceCounts!
	inbound: InboundInvoiceCounts!
}
type InvoiceCountsSummary {
	today: Int!
	thisWeek: Int!
}
type InvoiceDoesNotBelongToCurrentStore implements DeleteOutboundShipmentServiceLineErrorInterface & InsertOutboundShipmentLineErrorInterface & InsertInboundShipmentLineErrorInterface & DeleteOutboundShipmentLineErrorInterface & UpdateInboundShipmentLineErrorInterface & UpdateInboundShipmentErrorInterface & DeleteInboundShipmentErrorInterface & UpdateOutboundShipmentLineErrorInterface & DeleteInboundShipmentLineErrorInterface & DeleteOutboundShipmentErrorInterface {
	description: String!
}
input InvoiceFilterInput {
	id: EqualFilterStringInput
	invoiceNumber: EqualFilterBigNumberInput
	nameId: EqualFilterStringInput
	storeId: EqualFilterStringInput
	type: EqualFilterInvoiceTypeInput
	status: EqualFilterInvoiceStatusInput
	comment: SimpleStringFilterInput
	theirReference: EqualFilterStringInput
	createdDatetime: DatetimeFilterInput
	allocatedDatetime: DatetimeFilterInput
	pickedDatetime: DatetimeFilterInput
	shippedDatetime: DatetimeFilterInput
	deliveredDatetime: DatetimeFilterInput
	verifiedDatetime: DatetimeFilterInput
	requisitionId: EqualFilterStringInput
	linkedInvoiceId: EqualFilterStringInput
}
type InvoiceIsNotEditable implements UpdateOutboundShipmentErrorInterface {
	description: String!
}
type InvoiceLineBelongsToAnotherInvoice implements DeleteOutboundShipmentLineErrorInterface & UpdateOutboundShipmentLineErrorInterface & DeleteOutboundShipmentServiceLineErrorInterface & DeleteInboundShipmentLineErrorInterface & UpdateInboundShipmentLineErrorInterface & UpdateOutboundShipmentServiceLineErrorInterface {
	description: String!
	invoice: InvoiceResponse!
}
"""
Generic Connector
"""
type InvoiceLineConnector {
	totalCount: Int!
	nodes: [InvoiceLineNode!]!
}
type InvoiceLineHasNoStockLineError implements UpdateOutboundShipmentErrorInterface {
	description: String!
	invoiceLineId: String!
}
type InvoiceLineNode {
	id: String!
	invoiceId: String!
	itemId: String!
	itemName: String!
	itemCode: String!
	item: ItemResponse!
	packSize: Int!
	numberOfPacks: Int!
	costPricePerPack: Float!
	sellPricePerPack: Float!
	batch: String
	expiryDate: NaiveDate
	note: String
	locationName: String
	locationId: String
	type: InvoiceLineNodeType!
	location: LocationResponse
	stockLine: StockLineResponse
}
enum InvoiceLineNodeType {
	STOCK_IN
	STOCK_OUT
	UNALLOCATED_STOCK
	SERVICE
}
union InvoiceLineResponse = | NodeError | InvoiceLineNode
union InvoiceLinesResponse = | ConnectorError | InvoiceLineConnector
type InvoiceNode {
	id: String!
	otherPartyName: String!
	otherPartyId: String!
	otherPartyStore: StoreNode
	type: InvoiceNodeType!
	status: InvoiceNodeStatus!
	invoiceNumber: Int!
	theirReference: String
	comment: String
	onHold: Boolean!
	createdDatetime: DateTime!
	allocatedDatetime: DateTime
	pickedDatetime: DateTime
	shippedDatetime: DateTime
	deliveredDatetime: DateTime
	verifiedDatetime: DateTime
	colour: String
	"""
	Response Requisition that is the origin of this Outbound Shipment
	Or Request Requisition for Inbound Shipment that Originated from Outbound Shipment (linked through Response Requisition)
	"""
	requisition: RequisitionNode
	"""
	Inbound Shipment <-> Outbound Shipment, where Inbound Shipment originated from Outbound Shipment
	"""
	linkedShipment: InvoiceNode
	lines: InvoiceLinesResponse!
	pricing: InvoicePriceResponse!
	otherParty: NameResponse!
}
enum InvoiceNodeStatus {
	NEW
	ALLOCATED
	PICKED
	SHIPPED
	DELIVERED
	VERIFIED
}
enum InvoiceNodeType {
	OUTBOUND_SHIPMENT
	INBOUND_SHIPMENT
	INVENTORY_ADJUSTMENT
}
union InvoicePriceResponse = | NodeError | InvoicePricingNode
type InvoicePricingNode {
	totalBeforeTax: Float!
	totalAfterTax: Float!
	stockTotalBeforeTax: Float!
	stockTotalAfterTax: Float!
	serviceTotalBeforeTax: Float!
	serviceTotalAfterTax: Float!
}
union InvoiceResponse = | NodeError | InvoiceNode
enum InvoiceSortFieldInput {
	type
	otherPartyName
	invoiceNumber
	comment
	status
	createdDatetime
	allocatedDatetime
	pickedDatetime
	shippedDatetime
	deliveredDatetime
	verifiedDatetime
}
input InvoiceSortInput {
	"""
	Sort query result by `key`
	"""
	key: InvoiceSortFieldInput!
	"""
	Sort query result is sorted descending or ascending (if not provided the default is
ascending)
	"""
	desc: Boolean
}
union InvoicesResponse = | ConnectorError | InvoiceConnector
type ItemConnector {
	totalCount: Int!
	nodes: [ItemNode!]!
}
type ItemDoesNotMatchStockLine implements UpdateOutboundShipmentLineErrorInterface & InsertOutboundShipmentLineErrorInterface {
	description: String!
}
type ItemError {
	error: ItemResponseError!
}
input ItemFilterInput {
	id: EqualFilterStringInput
	name: SimpleStringFilterInput
	code: SimpleStringFilterInput
	isVisible: EqualFilterBooleanInput
}
type ItemNode {
	id: String!
	name: String!
	code: String!
	isVisible: Boolean!
	unitName: String
	stats(storeId: String!, lookBackDatetime: NaiveDateTime): ItemStatsNode!
	availableBatches: StockLinesResponse!
}
union ItemResponse = | ItemError | ItemNode
union ItemResponseError = | InternalError
enum ItemSortFieldInput {
	name
	code
}
input ItemSortInput {
	"""
	Sort query result by `key`
	"""
	key: ItemSortFieldInput!
	"""
	Sort query result is sorted descending or ascending (if not provided the default is
ascending)
	"""
	desc: Boolean
}
type ItemStatsNode {
	averageMonthlyConsumption: Int!
	availableStockOnHand: Int!
	availableMonthsOfStockOnHand: Float!
}
union ItemsResponse = | ConnectorError | ItemConnector
type LineDoesNotReferenceStockLine implements UpdateOutboundShipmentLineErrorInterface {
	description: String!
}
"""
Generic Connector
"""
type LocationConnector {
	totalCount: Int!
	nodes: [LocationNode!]!
}
input LocationFilterInput {
	name: EqualFilterStringInput
	code: EqualFilterStringInput
	id: EqualFilterStringInput
}
type LocationInUse implements DeleteLocationErrorInterface {
	description: String!
	stockLines: StockLineConnector!
	invoiceLines: InvoiceLineConnector!
}
type LocationIsOnHold implements InsertOutboundShipmentLineErrorInterface & UpdateOutboundShipmentLineErrorInterface {
	description: String!
}
type LocationNode {
	id: String!
	name: String!
	code: String!
	onHold: Boolean!
	stock: StockLinesResponse!
}
type LocationNotFound implements InsertOutboundShipmentLineErrorInterface & UpdateOutboundShipmentLineErrorInterface {
	description: String!
}
union LocationResponse = | NodeError | LocationNode
enum LocationSortFieldInput {
	name
	code
}
input LocationSortInput {
	"""
	Sort query result by `key`
	"""
	key: LocationSortFieldInput!
	"""
	Sort query result is sorted descending or ascending (if not provided the default is
ascending)
	"""
	desc: Boolean
}
union LocationsResponse = | ConnectorError | LocationConnector
type Logout {
	"""
	User id of the logged out user
	"""
	userId: String!
}
"""
Generic Error Wrapper
"""
type LogoutError {
	error: LogoutErrorInterface!
}
interface LogoutErrorInterface {
	description: String!
}
union LogoutResponse = | LogoutError | Logout
type MasterListConnector {
	totalCount: Int!
	nodes: [MasterListNode!]!
}
input MasterListFilterInput {
	id: EqualFilterStringInput
	name: SimpleStringFilterInput
	code: SimpleStringFilterInput
	description: SimpleStringFilterInput
	existsForName: SimpleStringFilterInput
	existsForNameId: EqualFilterStringInput
	existsForStoreId: EqualFilterStringInput
}
type MasterListLineConnector {
	totalCount: Int!
	nodes: [MasterListLineNode!]!
}
type MasterListLineNode {
	id: String!
	itemId: String!
	item: ItemNode!
}
type MasterListNode {
	id: String!
	name: String!
	code: String!
	description: String!
	lines: MasterListLineConnector!
}
type MasterListNotFoundForThisStore implements AddFromMasterListErrorInterface {
	description: String!
}
enum MasterListSortFieldInput {
	name
	code
	description
}
input MasterListSortInput {
	"""
	Sort query result by `key`
	"""
	key: MasterListSortFieldInput!
	"""
	Sort query result is sorted descending or ascending (if not provided the default is
ascending)
	"""
	desc: Boolean
}
union MasterListsResponse = | ConnectorError | MasterListConnector
type Mutations {
	registerUser(input: UserRegisterInput!): UserRegisterResponse!
	insertLocation(storeId: String!, input: InsertLocationInput!): InsertLocationResponse!
	updateLocation(storeId: String!, input: UpdateLocationInput!): UpdateLocationResponse!
	deleteLocation(storeId: String!, input: DeleteLocationInput!): DeleteLocationResponse!
	insertOutboundShipment(storeId: String!, input: InsertOutboundShipmentInput!): InsertOutboundShipmentResponse!
	updateOutboundShipment(input: UpdateOutboundShipmentInput!): UpdateOutboundShipmentResponse!
	deleteOutboundShipment(id: String!): DeleteOutboundShipmentResponse!
	insertOutboundShipmentLine(input: InsertOutboundShipmentLineInput!): InsertOutboundShipmentLineResponse!
	updateOutboundShipmentLine(input: UpdateOutboundShipmentLineInput!): UpdateOutboundShipmentLineResponse!
	deleteOutboundShipmentLine(input: DeleteOutboundShipmentLineInput!): DeleteOutboundShipmentLineResponse!
	insertOutboundShipmentServiceLine(input: InsertOutboundShipmentServiceLineInput!): InsertOutboundShipmentServiceLineResponse!
	updateOutboundShipmentServiceLine(input: UpdateOutboundShipmentServiceLineInput!): UpdateOutboundShipmentServiceLineResponse!
	deleteOutboundShipmentServiceLine(input: DeleteOutboundShipmentServiceLineInput!): DeleteOutboundShipmentServiceLineResponse!
	insertOutboundShipmentUnallocatedLine(input: InsertOutboundShipmentUnallocatedLineInput!): InsertOutboundShipmentUnallocatedLineResponse!
	updateOutboundShipmentUnallocatedLine(input: UpdateOutboundShipmentUnallocatedLineInput!): UpdateOutboundShipmentUnallocatedLineResponse!
	deleteOutboundShipmentUnallocatedLine(input: DeleteOutboundShipmentUnallocatedLineInput!): DeleteOutboundShipmentUnallocatedLineResponse!
	insertInboundShipment(storeId: String!, input: InsertInboundShipmentInput!): InsertInboundShipmentResponse!
	updateInboundShipment(input: UpdateInboundShipmentInput!): UpdateInboundShipmentResponse!
	deleteInboundShipment(input: DeleteInboundShipmentInput!): DeleteInboundShipmentResponse!
	insertInboundShipmentLine(storeId: String!, input: InsertInboundShipmentLineInput!): InsertInboundShipmentLineResponse!
	updateInboundShipmentLine(input: UpdateInboundShipmentLineInput!): UpdateInboundShipmentLineResponse!
	deleteInboundShipmentLine(input: DeleteInboundShipmentLineInput!): DeleteInboundShipmentLineResponse!
	batchInboundShipment(storeId: String!, insertInboundShipments: [InsertInboundShipmentInput!], insertInboundShipmentLines: [InsertInboundShipmentLineInput!], updateInboundShipmentLines: [UpdateInboundShipmentLineInput!], deleteInboundShipmentLines: [DeleteInboundShipmentLineInput!], updateInboundShipments: [UpdateInboundShipmentInput!], deleteInboundShipments: [DeleteInboundShipmentInput!]): BatchInboundShipmentResponse!
	batchOutboundShipment(storeId: String!, insertOutboundShipments: [InsertOutboundShipmentInput!], insertOutboundShipmentLines: [InsertOutboundShipmentLineInput!], updateOutboundShipmentLines: [UpdateOutboundShipmentLineInput!], deleteOutboundShipmentLines: [DeleteOutboundShipmentLineInput!], insertOutboundShipmentServiceLines: [InsertOutboundShipmentServiceLineInput!], updateOutboundShipmentServiceLines: [UpdateOutboundShipmentServiceLineInput!], deleteOutboundShipmentServiceLines: [DeleteOutboundShipmentServiceLineInput!], updateOutboundShipments: [UpdateOutboundShipmentInput!], deleteOutboundShipments: [String!]): BatchOutboundShipmentResponse!
	insertStockTake(storeId: String!, input: InsertStockTakeInput!): InsertStockTakeResponse!
	updateStockTake(storeId: String!, input: UpdateStockTakeInput!): UpdateStockTakeResponse!
	deleteStockTake(storeId: String!, input: DeleteStockTakeInput!): DeleteStockTakeResponse!
	insertStockTakeLine(storeId: String!, input: InsertStockTakeLineInput!): InsertStockTakeLineResponse!
	updateStockTakeLine(storeId: String!, input: UpdateStockTakeLineInput!): UpdateStockTakeLineResponse!
	deleteStockTakeLine(storeId: String!, input: DeleteStockTakeLineInput!): DeleteStockTakeLineResponse!
	insertRequestRequisition(storeId: String!, input: InsertRequestRequisitionInput!): InsertRequestRequisitionResponse!
	updateRequestRequisition(storeId: String!, input: UpdateRequestRequisitionInput!): UpdateRequestRequisitionResponse!
	deleteRequestRequisition(storeId: String!, input: DeleteRequestRequisitionInput!): DeleteRequestRequisitionResponse!
	"""
	Set requested for each line in request requisition to calculated
	"""
	useSuggestedQuantity(storeId: String!, input: UseSuggestedQuantityInput!): UseSuggestedQuantityResponse!
	"""
	Add requisition lines from master item master list
	"""
	addFromMasterList(storeId: String!, input: AddFromMasterListInput!): AddFromMasterListResponse!
	insertRequestRequisitionLine(storeId: String!, input: InsertRequestRequisitionLineInput!): InsertRequestRequisitionLineResponse!
	updateRequestRequisitionLine(storeId: String!, input: UpdateRequestRequisitionLineInput!): UpdateRequestRequisitionLineResponse!
	deleteRequestRequisitionLine(storeId: String!, input: DeleteRequestRequisitionLineInput!): DeleteRequestRequisitionLineResponse!
	updateResponseRequisition(storeId: String!, input: UpdateResponseRequisitionInput!): UpdateResponseRequisitionResponse!
	updateResponseRequisitionLine(storeId: String!, input: UpdateResponseRequisitionLineInput!): UpdateResponseRequisitionLineResponse!
	"""
	Set supply quantity to requested quantity
	"""
	supplyRequestedQuantity(storeId: String!, input: SupplyRequestedQuantityInput!): SupplyRequestedQuantityResponse!
	"""
	Create shipment for response requisition
	Will create Outbound Shipment with placeholder lines for each requisition line
	placeholder line quantity will be set to requisitionLine.supply - all linked outbound shipments
	lines quantity (placeholder and filled) for requisitionLine.item
	"""
	createRequisitionShipment(storeId: String!, input: CreateRequisitionShipmentInput!): CreateRequisitionShipmentResponse!
}
"""
ISO 8601 calendar date without timezone.
Format: %Y-%m-%d

# Examples

* `1994-11-13`
* `2000-02-24`
"""
scalar NaiveDate
"""
ISO 8601 combined date and time without timezone.

# Examples

* `2015-07-01T08:59:60.123`,
"""
scalar NaiveDateTime
type NameConnector {
	totalCount: Int!
	nodes: [NameNode!]!
}
input NameFilterInput {
	id: EqualFilterStringInput
	"""
	Filter by name
	"""
	name: SimpleStringFilterInput
	"""
	Filter by code
	"""
	code: SimpleStringFilterInput
	"""
	Filter by customer property
	"""
	isCustomer: Boolean
	"""
	Filter by supplier property
	"""
	isSupplier: Boolean
}
type NameNode {
	id: String!
	name: String!
	code: String!
	isCustomer: Boolean!
	isSupplier: Boolean!
	store: StoreNode
}
union NameResponse = | NodeError | NameNode
enum NameSortFieldInput {
	name
	code
}
input NameSortInput {
	"""
	Sort query result by `key`
	"""
	key: NameSortFieldInput!
	"""
	Sort query result is sorted descending or ascending (if not provided the default is
ascending)
	"""
	desc: Boolean
}
union NamesResponse = | ConnectorError | NameConnector
type NoRefreshTokenProvided implements RefreshTokenErrorInterface {
	description: String!
}
"""
Generic Error Wrapper
"""
type NodeError {
	error: NodeErrorInterface!
}
interface NodeErrorInterface {
	description: String!
}
type NotARefreshToken implements RefreshTokenErrorInterface {
	description: String!
}
type NotAServiceItem implements InsertOutboundShipmentServiceLineErrorInterface & DeleteOutboundShipmentServiceLineErrorInterface & UpdateOutboundShipmentServiceLineErrorInterface {
	description: String!
}
type NotAnInboundShipment implements UpdateInboundShipmentLineErrorInterface & InsertInboundShipmentLineErrorInterface & UpdateInboundShipmentErrorInterface & DeleteInboundShipmentErrorInterface & DeleteInboundShipmentLineErrorInterface {
	description: String!
}
type NotAnOutboundShipment implements DeleteOutboundShipmentErrorInterface & DeleteOutboundShipmentLineErrorInterface & InsertOutboundShipmentServiceLineErrorInterface & DeleteOutboundShipmentServiceLineErrorInterface & UpdateOutboundShipmentLineErrorInterface & InsertOutboundShipmentLineErrorInterface & UpdateOutboundShipmentServiceLineErrorInterface {
	description: String!
}
type NotAnOutboundShipmentError implements UpdateOutboundShipmentErrorInterface {
	description: String!
}
type NotEnoughStockForReduction implements InsertOutboundShipmentLineErrorInterface & UpdateOutboundShipmentLineErrorInterface {
	description: String!
	line: InvoiceLineResponse
	batch: StockLineResponse!
}
type NothingRemainingToSupply implements CreateRequisitionShipmentErrorInterface {
	description: String!
}
type OtherPartyCannotBeThisStoreError implements UpdateOutboundShipmentErrorInterface & InsertOutboundShipmentErrorInterface {
	description: String!
}
type OtherPartyNotACustomerError implements UpdateOutboundShipmentErrorInterface & InsertOutboundShipmentErrorInterface {
	description: String!
	otherParty: NameNode!
}
type OtherPartyNotASupplier implements UpdateInboundShipmentErrorInterface & InsertRequestRequisitionErrorInterface & InsertInboundShipmentErrorInterface {
	description: String!
	otherParty: NameNode!
}
type OutboundInvoiceCounts {
	created: InvoiceCountsSummary!
	"""
	Number of outbound shipments ready to be picked
	"""
	toBePicked: Int!
}
type PaginationError implements ConnectorErrorInterface {
	description: String!
	rangeError: RangeError!
}
"""
Pagination input.

Option to limit the number of returned items and/or queries large lists in "pages".
"""
input PaginationInput {
	"""
	Max number of returned items
	"""
	first: Int
	"""
	First returned item is at the `offset` position in the full list
	"""
	offset: Int
}
type Queries {
	apiVersion: String!
	"""
	Retrieves a new auth bearer and refresh token
	The refresh token is returned as a cookie
	"""
	authToken(username: String!, password: String!): AuthTokenResponse!
	logout: LogoutResponse!
	"""
	Retrieves a new auth bearer and refresh token
	The refresh token is returned as a cookie
	"""
	refreshToken: RefreshTokenResponse!
	me: UserResponse!
	"""
	Query omSupply "name" entries
	"""
	names(page: PaginationInput, filter: NameFilterInput, sort: [NameSortInput!]): NamesResponse!
	stores(page: PaginationInput, filter: StoreFilterInput): StoresResponse!
	"""
	Query omSupply "locations" entries
	"""
	locations(page: PaginationInput, filter: LocationFilterInput, sort: [LocationSortInput!]): LocationsResponse!
	"""
	Query omSupply "master_lists" entries
	"""
	masterLists(page: PaginationInput, filter: MasterListFilterInput, sort: [MasterListSortInput!]): MasterListsResponse!
	"""
	Query omSupply "item" entries
	"""
	items(page: PaginationInput, filter: ItemFilterInput, sort: [ItemSortInput!]): ItemsResponse!
	invoice(id: String!): InvoiceResponse!
	invoiceByNumber(invoiceNumber: Int!, type: InvoiceNodeType!): InvoiceResponse!
	invoices(page: PaginationInput, filter: InvoiceFilterInput, sort: [InvoiceSortInput!]): InvoicesResponse!
	invoiceCounts(timezoneOffset: Int): InvoiceCounts!
	stockCounts(timezoneOffset: Int, daysTillExpired: Int): StockCounts!
	stockTakes(storeId: String!, page: PaginationInput, filter: StockTakeFilterInput, sort: [StockTakeSortInput!]): StockTakesResponse!
	requisition(storeId: String!, id: String!): RequisitionResponse!
	requisitions(storeId: String!, page: PaginationInput, filter: RequisitionFilterInput, sort: [RequisitionSortInput!]): RequisitionsResponse!
	requisitionByNumber(storeId: String!, requisitionNumber: Int!, type: RequisitionNodeType!): RequisitionResponse!
}
type RangeError implements UpdateOutboundShipmentLineErrorInterface & InsertOutboundShipmentLineErrorInterface & UpdateInboundShipmentLineErrorInterface & InsertInboundShipmentLineErrorInterface {
	description: String!
	field: RangeField!
	max: Int
	min: Int
}
enum RangeField {
	first
	numberOfPacks
	packSize
}
type RecordAlreadyExist implements InsertLocationErrorInterface & InsertOutboundShipmentLineErrorInterface & InsertInboundShipmentLineErrorInterface & InsertOutboundShipmentErrorInterface & InsertOutboundShipmentServiceLineErrorInterface & InsertInboundShipmentErrorInterface & UserRegisterErrorInterface {
	description: String!
}
type RecordBelongsToAnotherStore implements UpdateLocationErrorInterface & DeleteLocationErrorInterface {
	description: String!
}
type RecordDoesNotExist implements SupplyRequestedQuantityErrorInterface & UpdateRequestRequisitionErrorInterface & UseSuggestedQuantityErrorInterface & UpdateRequestRequisitionLineErrorInterface & UpdateResponseRequisitionErrorInterface & UpdateResponseRequisitionLineErrorInterface & DeleteRequestRequisitionLineErrorInterface & DeleteOutboundShipmentUnallocatedLineErrorInterface & AddFromMasterListErrorInterface & UpdateOutboundShipmentUnallocatedLineErrorInterface & CreateRequisitionShipmentErrorInterface & DeleteRequestRequisitionErrorInterface {
	description: String!
}
type RecordNotFound implements DeleteInboundShipmentErrorInterface & UpdateInboundShipmentLineErrorInterface & DeleteOutboundShipmentServiceLineErrorInterface & UpdateOutboundShipmentServiceLineErrorInterface & DeleteInboundShipmentLineErrorInterface & DeleteLocationErrorInterface & DeleteOutboundShipmentErrorInterface & UpdateOutboundShipmentErrorInterface & UpdateLocationErrorInterface & NodeErrorInterface & UpdateOutboundShipmentLineErrorInterface & DeleteOutboundShipmentLineErrorInterface & UpdateInboundShipmentErrorInterface {
	description: String!
}
type RefreshToken {
	"""
	New Bearer token
	"""
	token: String!
}
"""
Generic Error Wrapper
"""
type RefreshTokenError {
	error: RefreshTokenErrorInterface!
}
interface RefreshTokenErrorInterface {
	description: String!
}
union RefreshTokenResponse = | RefreshTokenError | RefreshToken
type RegisteredUser {
	id: String!
	username: String!
	email: String
}
type RequisitionConnector {
	totalCount: Int!
	nodes: [RequisitionNode!]!
}
input RequisitionFilterInput {
	id: EqualFilterStringInput
	requisitionNumber: EqualFilterBigNumberInput
	type: EqualFilterRequisitionTypeInput
	status: EqualFilterRequisitionStatusInput
	createdDatetime: DatetimeFilterInput
	sentDatetime: DatetimeFilterInput
	finalisedDatetime: DatetimeFilterInput
	otherPartyName: SimpleStringFilterInput
	otherPartyId: EqualFilterStringInput
	colour: EqualFilterStringInput
	theirReference: SimpleStringFilterInput
	comment: SimpleStringFilterInput
}
type RequisitionLineConnector {
	totalCount: Int!
	nodes: [RequisitionLineNode!]!
}
type RequisitionLineNode {
	id: String!
	itemId: String!
	item: ItemNode!
	"""
	Quantity requested
	"""
	requestedQuantity: Int!
	"""
	Quantity to be supplied in the next shipment, only used in response requisition
	"""
	supplyQuantity: Int!
	"""
	Calculated quantity
	When months_of_stock < requisition.min_months_of_stock, calculated = average_monthy_consumption * requisition.max_months_of_stock - months_of_stock
	"""
	SuggestedQuantity: Int!
	"""
	OutboundShipment lines linked to requisitions line
	"""
	outboundShipmentLines: InvoiceLineConnector!
	"""
	InboundShipment lines linked to requisitions line
	"""
	inboundShipmentLines: InvoiceLineConnector!
	"""
	Snapshot Stats (when requisition was created)
	"""
	itemStats: ItemStatsNode!
	linkedRequisitionLine: RequisitionLineNode
}
type RequisitionLineWithItemIdExists implements InsertRequestRequisitionLineErrorInterface {
	description: String!
}
type RequisitionNode {
	id: String!
	type: RequisitionNodeType!
	status: RequisitionNodeStatus!
	createdDatetime: DateTime!
	"""
	Applicable to request requisition only
	"""
	sentDatetime: DateTime
	finalisedDatetime: DateTime
	requisitionNumber: Int!
	colour: String
	theirReference: String
	comment: String
	"""
	Request Requisition: Supplying store (store that is supplying stock)
	Response Requisition: Customer store (store that is ordering stock)
	"""
	otherParty: NameNode!
	otherPartyName: String!
	otherPartyId: String!
	"""
	Maximum calculated quantity, used to deduce calculated quantity for each line, see calculated in requisition line
	"""
	maxMonthsOfStock: Float!
	"""
	Minimum quantity to have for stock to be ordered, used to deduce calculated quantity for each line, see calculated in requisition line
	"""
	minMonthsOfStock: Float!
	lines: RequisitionLineConnector!
	"""
	Link to request requisition
	"""
	requestRequisition: RequisitionNode
	"""
	Response Requisition: Outbound Shipments linked requisition
	Request Requisition: Inbound Shipments linked to requisition
	"""
	shipments: InvoiceConnector!
}
enum RequisitionNodeStatus {
	DRAFT
	NEW
	SENT
	FINALISED
}
enum RequisitionNodeType {
	REQUEST
	RESPONSE
}
union RequisitionResponse = | RecordNotFound | RequisitionNode
enum RequisitionSortFieldInput {
	requisitionNumber
	type
	status
	otherPartyName
	sentDatetime
	createdDatetime
	finalisedDatetime
}
input RequisitionSortInput {
	"""
	Sort query result by `key`
	"""
	key: RequisitionSortFieldInput!
	"""
	Sort query result is sorted descending or ascending (if not provided the default is
ascending)
	"""
	desc: Boolean
}
union RequisitionsResponse = | RequisitionConnector
input SimpleStringFilterInput {
	"""
	Search term must be an exact match (case sensitive)
	"""
	equalTo: String
	"""
	Search term must be included in search candidate (case insensitive)
	"""
	like: String
}
type SnapshotCountCurrentCountMismatch implements UpdateStockTakeErrorInterface {
	description: String!
	lines: StockTakeLineConnector!
}
type StockCounts {
	expired: Int!
	expiringSoon: Int!
}
type StockLineAlreadyExistsInInvoice implements InsertOutboundShipmentLineErrorInterface & UpdateOutboundShipmentLineErrorInterface {
	description: String!
	line: InvoiceLineResponse!
}
"""
Generic Connector
"""
type StockLineConnector {
	totalCount: Int!
	nodes: [StockLineNode!]!
}
type StockLineDoesNotBelongToCurrentStore implements InsertOutboundShipmentLineErrorInterface & UpdateOutboundShipmentLineErrorInterface {
	description: String!
}
type StockLineIsOnHold implements InsertOutboundShipmentLineErrorInterface & UpdateOutboundShipmentLineErrorInterface {
	description: String!
}
type StockLineNode {
	id: String!
	itemId: String!
	storeId: String!
	batch: String
	packSize: Int!
	costPricePerPack: Float!
	sellPricePerPack: Float!
	availableNumberOfPacks: Int!
	totalNumberOfPacks: Int!
	expiryDate: NaiveDate
	onHold: Boolean!
	note: String
	locationId: String
	locationName: String
	location: LocationResponse
}
union StockLineResponse = | NodeError | StockLineNode
union StockLinesResponse = | ConnectorError | StockLineConnector
type StockTakeConnector {
	totalCount: Int!
	nodes: [StockTakeNode!]!
}
input StockTakeFilterInput {
	id: EqualFilterStringInput
	stockTakeNumber: EqualFilterBigNumberInput
	status: EqualFilterStockTakeStatusInput
	createdDatetime: DatetimeFilterInput
	finalisedDatetime: DatetimeFilterInput
}
type StockTakeLineConnector {
	totalCount: Int!
	nodes: [StockTakeLineNode!]!
}
type StockTakeLineNode {
	id: String!
	stockTakeId: String!
	stockLine: StockLineNode
	location: LocationNode
	comment: String
	snapshotNumberOfPacks: Int!
	countedNumberOfPacks: Int
	itemId: String!
	item: ItemNode
	batch: String
	expiryDate: NaiveDate
	packSize: Int
	costPricePerPack: Float
	sellPricePerPack: Float
	note: String
}
type StockTakeNode {
	id: String!
	storeId: String!
	stockTakeNumber: Int!
	comment: String
	description: String
	status: StockTakeNodeStatus!
	createdDatetime: NaiveDateTime!
	finalisedDatetime: NaiveDateTime
	inventoryAdjustmentId: String
	inventoryAdjustment: InvoiceNode
	lines: StockTakeLineConnector!
}
enum StockTakeNodeStatus {
	NEW
	FINALISED
}
enum StockTakeSortFieldInput {
	status
	createdDatetime
	finalisedDatetime
}
input StockTakeSortInput {
	"""
	Sort query result by `key`
	"""
	key: StockTakeSortFieldInput!
	"""
	Sort query result is sorted descending or ascending (if not provided the default is
ascending)
	"""
	desc: Boolean
}
union StockTakesResponse = | StockTakeConnector
type StoreConnector {
	totalCount: Int!
	nodes: [StoreNode!]!
}
input StoreFilterInput {
	id: SimpleStringFilterInput
}
type StoreNode {
	id: String!
	code: String!
}
union StoresResponse = | StoreConnector
type SupplyRequestedQuantityError {
	error: SupplyRequestedQuantityErrorInterface!
}
interface SupplyRequestedQuantityErrorInterface {
	description: String!
}
input SupplyRequestedQuantityInput {
	responseRequisitionId: String!
}
union SupplyRequestedQuantityResponse = | SupplyRequestedQuantityError | RequisitionLineConnector
input TaxUpdate {
	"""
	Set or unset the tax value (in percentage)
	"""
	percentage: Float
}
type TokenExpired implements RefreshTokenErrorInterface {
	description: String!
}
type UnallocatedLineForItemAlreadyExists implements InsertOutboundShipmentUnallocatedLineErrorInterface {
	description: String!
}
type UnallocatedLinesOnlyEditableInNewInvoice implements InsertOutboundShipmentUnallocatedLineErrorInterface {
	description: String!
}
enum UniqueValueKey {
	code
}
type UniqueValueViolation implements UpdateLocationErrorInterface & InsertLocationErrorInterface {
	description: String!
	field: UniqueValueKey!
}
"""
Generic Error Wrapper
"""
type UpdateInboundShipmentError {
	error: UpdateInboundShipmentErrorInterface!
}
interface UpdateInboundShipmentErrorInterface {
	description: String!
}
input UpdateInboundShipmentInput {
	id: String!
	otherPartyId: String
	status: UpdateInboundShipmentStatusInput
	onHold: Boolean
	comment: String
	theirReference: String
	colour: String
}
"""
Generic Error Wrapper
"""
type UpdateInboundShipmentLineError {
	error: UpdateInboundShipmentLineErrorInterface!
}
interface UpdateInboundShipmentLineErrorInterface {
	description: String!
}
input UpdateInboundShipmentLineInput {
	id: String!
	invoiceId: String!
	itemId: String
	locationId: String
	packSize: Int
	batch: String
	costPricePerPack: Float
	sellPricePerPack: Float
	expiryDate: NaiveDate
	numberOfPacks: Int
}
union UpdateInboundShipmentLineResponse = | UpdateInboundShipmentLineError | NodeError | InvoiceLineNode
type UpdateInboundShipmentLineResponseWithId {
	id: String!
	response: UpdateInboundShipmentLineResponse!
}
union UpdateInboundShipmentResponse = | UpdateInboundShipmentError | NodeError | InvoiceNode
type UpdateInboundShipmentResponseWithId {
	id: String!
	response: UpdateInboundShipmentResponse!
}
enum UpdateInboundShipmentStatusInput {
	DELIVERED
	VERIFIED
}
type UpdateLocationError {
	error: UpdateLocationErrorInterface!
}
interface UpdateLocationErrorInterface {
	description: String!
}
input UpdateLocationInput {
	id: String!
	code: String
	name: String
	onHold: Boolean
}
union UpdateLocationResponse = | UpdateLocationError | LocationNode
"""
Generic Error Wrapper
"""
type UpdateOutboundShipmentError {
	error: UpdateOutboundShipmentErrorInterface!
}
interface UpdateOutboundShipmentErrorInterface {
	description: String!
}
input UpdateOutboundShipmentInput {
	"""
	The new invoice id provided by the client
	"""
	id: String!
	"""
	The other party must be a customer of the current store.
This field can be used to change the other_party of an invoice
	"""
	otherPartyId: String
	"""
	When changing the status from DRAFT to CONFIRMED or FINALISED the total_number_of_packs for
existing invoice items gets updated.
	"""
	status: UpdateOutboundShipmentStatusInput
	onHold: Boolean
	comment: String
	"""
	External invoice reference, e.g. purchase or shipment number
	"""
	theirReference: String
	colour: String
}
"""
Generic Error Wrapper
"""
type UpdateOutboundShipmentLineError {
	error: UpdateOutboundShipmentLineErrorInterface!
}
interface UpdateOutboundShipmentLineErrorInterface {
	description: String!
}
input UpdateOutboundShipmentLineInput {
	id: String!
	invoiceId: String!
	itemId: String
	stockLineId: String
	numberOfPacks: Int
	totalBeforeTax: Float
	totalAfterTax: Float
	tax: TaxUpdate
}
union UpdateOutboundShipmentLineResponse = | UpdateOutboundShipmentLineError | NodeError | InvoiceLineNode
type UpdateOutboundShipmentLineResponseWithId {
	id: String!
	response: UpdateOutboundShipmentLineResponse!
}
union UpdateOutboundShipmentResponse = | UpdateOutboundShipmentError | NodeError | InvoiceNode
type UpdateOutboundShipmentResponseWithId {
	id: String!
	response: UpdateOutboundShipmentResponse!
}
"""
Generic Error Wrapper
"""
type UpdateOutboundShipmentServiceLineError {
	error: UpdateOutboundShipmentServiceLineErrorInterface!
}
interface UpdateOutboundShipmentServiceLineErrorInterface {
	description: String!
}
input UpdateOutboundShipmentServiceLineInput {
	id: String!
	invoiceId: String!
	itemId: String
	name: String
	totalBeforeTax: Float
	totalAfterTax: Float
	tax: TaxUpdate
	note: String
}
union UpdateOutboundShipmentServiceLineResponse = | UpdateOutboundShipmentServiceLineError | InvoiceLineNode
type UpdateOutboundShipmentServiceLineResponseWithId {
	id: String!
	response: UpdateOutboundShipmentServiceLineResponse!
}
enum UpdateOutboundShipmentStatusInput {
	ALLOCATED
	PICKED
	SHIPPED
}
type UpdateOutboundShipmentUnallocatedLineError {
	error: UpdateOutboundShipmentUnallocatedLineErrorInterface!
}
interface UpdateOutboundShipmentUnallocatedLineErrorInterface {
	description: String!
}
input UpdateOutboundShipmentUnallocatedLineInput {
	id: String!
	quantity: Int!
}
union UpdateOutboundShipmentUnallocatedLineResponse = | UpdateOutboundShipmentUnallocatedLineError | InvoiceLineNode
type UpdateRequestRequisitionError {
	error: UpdateRequestRequisitionErrorInterface!
}
interface UpdateRequestRequisitionErrorInterface {
	description: String!
}
input UpdateRequestRequisitionInput {
	id: String!
	colour: String
	theirReference: String
	comment: String
	maxMonthsOfStock: Float
	minMonthsOfStock: Float
	status: UpdateRequestRequisitionStatusInput
}
type UpdateRequestRequisitionLineError {
	error: UpdateRequestRequisitionLineErrorInterface!
}
interface UpdateRequestRequisitionLineErrorInterface {
	description: String!
}
input UpdateRequestRequisitionLineInput {
	id: String!
	requestedQuantity: Int
}
union UpdateRequestRequisitionLineResponse = | UpdateRequestRequisitionLineError | RequisitionLineNode
union UpdateRequestRequisitionResponse = | UpdateRequestRequisitionError | RequisitionNode
enum UpdateRequestRequisitionStatusInput {
	SENT
}
type UpdateResponseRequisitionError {
	error: UpdateResponseRequisitionErrorInterface!
}
interface UpdateResponseRequisitionErrorInterface {
	description: String!
}
input UpdateResponseRequisitionInput {
	id: String!
	colour: String
	theirReference: String
	comment: String
	status: UpdateResponseRequisitionStatusInput
}
type UpdateResponseRequisitionLineError {
	error: UpdateResponseRequisitionLineErrorInterface!
}
interface UpdateResponseRequisitionLineErrorInterface {
	description: String!
}
input UpdateResponseRequisitionLineInput {
	id: String!
	supplyQuantity: Int
}
union UpdateResponseRequisitionLineResponse = | UpdateResponseRequisitionLineError | RequisitionLineNode
union UpdateResponseRequisitionResponse = | UpdateResponseRequisitionError | RequisitionNode
enum UpdateResponseRequisitionStatusInput {
	FINALISED
}
type UpdateStockTakeError {
	error: UpdateStockTakeErrorInterface!
}
interface UpdateStockTakeErrorInterface {
	description: String!
}
input UpdateStockTakeInput {
	id: String!
	comment: String
	description: String
	status: StockTakeNodeStatus
}
input UpdateStockTakeLineInput {
	id: String!
	locationId: String
	comment: String
	snapshotNumberOfPacks: Int
	countedNumberOfPacks: Int
	batch: String
	expiryDate: NaiveDate
	packSize: Int
	costPricePerPack: Float
	sellPricePerPack: Float
	note: String
}
union UpdateStockTakeLineResponse = | StockTakeLineNode
union UpdateStockTakeResponse = | StockTakeNode | UpdateStockTakeError
type UseSuggestedQuantityError {
	error: UseSuggestedQuantityErrorInterface!
}
interface UseSuggestedQuantityErrorInterface {
	description: String!
}
input UseSuggestedQuantityInput {
	requestRequisitionId: String!
}
union UseSuggestedQuantityResponse = | UseSuggestedQuantityError | RequisitionLineConnector
type User {
	"""
	Internal user id
	"""
	userId: String!
	"""
	The user's email address
	"""
	email: String
}
type UserNameDoesNotExist implements AuthTokenErrorInterface {
	description: String!
}
"""
Generic Error Wrapper
"""
type UserRegisterError {
	error: UserRegisterErrorInterface!
}
interface UserRegisterErrorInterface {
	description: String!
}
input UserRegisterInput {
	username: String!
	password: String!
	email: String
}
union UserRegisterResponse = | UserRegisterError | RegisteredUser
union UserResponse = | User
schema {
	query: Queries
	mutation: Mutations
}
